/* automatically generated by rust-bindgen 0.70.1 */

pub const CanSuccess: u32 = 0;
pub const DnetSuccess: u32 = 0;
pub const NC_ATTR_STATE: u32 = 2147483657;
pub const NC_ATTR_STATUS: u32 = 2147483658;
pub const NC_ATTR_BAUD_RATE: u32 = 2147483655;
pub const NC_ATTR_START_ON_OPEN: u32 = 2147483654;
pub const NC_ATTR_ABS_TIME: u32 = 2147483656;
pub const NC_ATTR_PERIOD: u32 = 2147483663;
pub const NC_ATTR_TIMESTAMPING: u32 = 2147483664;
pub const NC_ATTR_READ_PENDING: u32 = 2147483665;
pub const NC_ATTR_WRITE_PENDING: u32 = 2147483666;
pub const NC_ATTR_READ_Q_LEN: u32 = 2147483667;
pub const NC_ATTR_WRITE_Q_LEN: u32 = 2147483668;
pub const NC_ATTR_RX_CHANGES_ONLY: u32 = 2147483669;
pub const NC_ATTR_COMM_TYPE: u32 = 2147483670;
pub const NC_ATTR_RTSI_MODE: u32 = 2147483671;
pub const NC_ATTR_RTSI_SIGNAL: u32 = 2147483672;
pub const NC_ATTR_RTSI_SIG_BEHAV: u32 = 2147483673;
pub const NC_ATTR_RTSI_FRAME: u32 = 2147483680;
pub const NC_ATTR_RTSI_SKIP: u32 = 2147483681;
pub const NC_ATTR_COMP_STD: u32 = 2147549185;
pub const NC_ATTR_MASK_STD: u32 = 2147549186;
pub const NC_ATTR_COMP_XTD: u32 = 2147549187;
pub const NC_ATTR_MASK_XTD: u32 = 2147549188;
pub const NC_ATTR_TX_RESPONSE: u32 = 2147549190;
pub const NC_ATTR_DATA_LEN: u32 = 2147549191;
pub const NC_ATTR_LOG_COMM_ERRS: u32 = 2147549194;
pub const NC_ATTR_NOTIFY_MULT_LEN: u32 = 2147549195;
pub const NC_ATTR_RX_Q_LEN: u32 = 2147549196;
pub const NC_ATTR_VIRTUAL_BUS_TIMING: u32 = 2684354609;
pub const NC_ATTR_TRANSMIT_MODE: u32 = 2147614761;
pub const NC_ATTR_LOG_START_TRIGGER: u32 = 2147614769;
pub const NC_ATTR_TIMESTAMP_FORMAT: u32 = 2147614770;
pub const NC_ATTR_MASTER_TIMEBASE_RATE: u32 = 2147614771;
pub const NC_ATTR_WRITE_ENTRIES_FREE: u32 = 2147614772;
pub const NC_ATTR_TIMELINE_RECOVERY: u32 = 2147614773;
pub const NC_ATTR_LOG_BUS_ERROR: u32 = 2147614775;
pub const NC_ATTR_LOG_TRANSCEIVER_FAULT: u32 = 2147614776;
pub const NC_ATTR_TERMINATION: u32 = 2147614785;
pub const NC_ATTR_LIN_SLEEP: u32 = 2147614786;
pub const NC_ATTR_LIN_CHECKSUM_TYPE: u32 = 2147614787;
pub const NC_ATTR_LIN_RESPONSE_TIMEOUT: u32 = 2147614788;
pub const NC_ATTR_LIN_ENABLE_DLC_CHECK: u32 = 2147614789;
pub const NC_ATTR_LIN_LOG_WAKEUP: u32 = 2147614790;
pub const NC_ATTR_LISTEN_ONLY: u32 = 2147549200;
pub const NC_ATTR_RX_ERROR_COUNTER: u32 = 2147549201;
pub const NC_ATTR_TX_ERROR_COUNTER: u32 = 2147549202;
pub const NC_ATTR_SERIES2_COMP: u32 = 2147549203;
pub const NC_ATTR_SERIES2_MASK: u32 = 2147549204;
pub const NC_ATTR_SERIES2_FILTER_MODE: u32 = 2147549205;
pub const NC_ATTR_SELF_RECEPTION: u32 = 2147549206;
pub const NC_ATTR_SINGLE_SHOT_TX: u32 = 2147549207;
pub const NC_ATTR_BEHAV_FINAL_OUT: u32 = 2147549208;
pub const NC_ATTR_TRANSCEIVER_MODE: u32 = 2147549209;
pub const NC_ATTR_TRANSCEIVER_EXTERNAL_OUT: u32 = 2147549210;
pub const NC_ATTR_TRANSCEIVER_EXTERNAL_IN: u32 = 2147549211;
pub const NC_ATTR_SERIES2_ERR_ARB_CAPTURE: u32 = 2147549212;
pub const NC_ATTR_TRANSCEIVER_TYPE: u32 = 2147614727;
pub const NC_ATTR_NUM_CARDS: u32 = 2147614722;
pub const NC_ATTR_HW_SERIAL_NUM: u32 = 2147614723;
pub const NC_ATTR_HW_FORMFACTOR: u32 = 2147614724;
pub const NC_ATTR_HW_SERIES: u32 = 2147614725;
pub const NC_ATTR_NUM_PORTS: u32 = 2147614726;
pub const NC_ATTR_HW_TRANSCEIVER: u32 = 2147614727;
pub const NC_ATTR_INTERFACE_NUM: u32 = 2147614728;
pub const NC_ATTR_VERSION_MAJOR: u32 = 2147614729;
pub const NC_ATTR_VERSION_MINOR: u32 = 2147614730;
pub const NC_ATTR_VERSION_UPDATE: u32 = 2147614731;
pub const NC_ATTR_VERSION_PHASE: u32 = 2147614732;
pub const NC_ATTR_VERSION_BUILD: u32 = 2147614733;
pub const NC_ATTR_VERSION_COMMENT: u32 = 2147614734;
pub const NC_ATTR_PROTOCOL: u32 = 2147483649;
pub const NC_ATTR_PROTOCOL_VERSION: u32 = 2147483650;
pub const NC_ATTR_SOFTWARE_VERSION: u32 = 2147483651;
pub const NC_ATTR_BKD_READ_SIZE: u32 = 2147483659;
pub const NC_ATTR_BKD_WRITE_SIZE: u32 = 2147483660;
pub const NC_ATTR_BKD_TYPE: u32 = 2147483661;
pub const NC_ATTR_BKD_WHEN_USED: u32 = 2147483662;
pub const NC_ATTR_BKD_PERIOD: u32 = 2147483663;
pub const NC_ATTR_BKD_CHANGES_ONLY: u32 = 2147483669;
pub const NC_ATTR_SERIAL_NUMBER: u32 = 2147483808;
pub const NC_ATTR_CAN_BIT_TIMINGS: u32 = 2147549189;
pub const NC_ATTR_BKD_CAN_RESPONSE: u32 = 2147549190;
pub const NC_ATTR_CAN_DATA_LENGTH: u32 = 2147549191;
pub const NC_ATTR_CAN_COMP_STD: u32 = 2147549185;
pub const NC_ATTR_CAN_MASK_STD: u32 = 2147549186;
pub const NC_ATTR_CAN_COMP_XTD: u32 = 2147549187;
pub const NC_ATTR_CAN_MASK_XTD: u32 = 2147549188;
pub const NC_ATTR_CAN_TX_RESPONSE: u32 = 2147549190;
pub const NC_ATTR_NOTIFY_MULT_SIZE: u32 = 2147549195;
pub const NC_ATTR_RESET_ON_START: u32 = 2147549192;
pub const NC_ATTR_NET_SYNC_COUNT: u32 = 2147549197;
pub const NC_ATTR_IS_NET_SYNC: u32 = 2147549198;
pub const NC_ATTR_START_TRIG_BEHAVIOR: u32 = 2147549219;
pub const NC_BKD_TYPE_PEER2PEER: u32 = 1;
pub const NC_BKD_TYPE_REQUEST: u32 = 2;
pub const NC_BKD_TYPE_RESPONSE: u32 = 3;
pub const NC_BKD_WHEN_PERIODIC: u32 = 1;
pub const NC_BKD_WHEN_UNSOLICITED: u32 = 2;
pub const NC_BKD_CAN_ZERO_SIZE: u32 = 32768;
pub const NC_TRUE: u32 = 1;
pub const NC_FALSE: u32 = 0;
pub const NC_DURATION_NONE: u32 = 0;
pub const NC_DURATION_INFINITE: u32 = 4294967295;
pub const NC_DURATION_1MS: u32 = 1;
pub const NC_DURATION_10MS: u32 = 10;
pub const NC_DURATION_100MS: u32 = 100;
pub const NC_DURATION_1SEC: u32 = 1000;
pub const NC_DURATION_10SEC: u32 = 10000;
pub const NC_DURATION_100SEC: u32 = 100000;
pub const NC_DURATION_1MIN: u32 = 60000;
pub const NC_PROTOCOL_CAN: u32 = 1;
pub const NC_PROTOCOL_DNET: u32 = 2;
pub const NC_PROTOCOL_LIN: u32 = 3;
pub const NC_ST_READ_AVAIL: u32 = 1;
pub const NC_ST_WRITE_SUCCESS: u32 = 2;
pub const NC_ST_ESTABLISHED: u32 = 8;
pub const NC_ST_STOPPED: u32 = 4;
pub const NC_ST_ERROR: u32 = 16;
pub const NC_ST_WARNING: u32 = 32;
pub const NC_ST_READ_MULT: u32 = 8;
pub const NC_ST_REMOTE_WAKEUP: u32 = 64;
pub const NC_ST_WRITE_MULT: u32 = 128;
pub const NC_OP_START: u32 = 2147483649;
pub const NC_OP_STOP: u32 = 2147483650;
pub const NC_OP_RESET: u32 = 2147483651;
pub const NC_OP_ACTIVE: u32 = 2147483652;
pub const NC_OP_IDLE: u32 = 2147483653;
pub const NC_OP_RTSI_OUT: u32 = 2147483652;
pub const NC_BAUD_10K: u32 = 10000;
pub const NC_BAUD_100K: u32 = 100000;
pub const NC_BAUD_125K: u32 = 125000;
pub const NC_BAUD_250K: u32 = 250000;
pub const NC_BAUD_500K: u32 = 500000;
pub const NC_BAUD_1000K: u32 = 1000000;
pub const NC_CAN_COMM_RX_UNSOL: u32 = 0;
pub const NC_CAN_COMM_TX_BY_CALL: u32 = 1;
pub const NC_CAN_COMM_RX_PERIODIC: u32 = 2;
pub const NC_CAN_COMM_TX_PERIODIC: u32 = 3;
pub const NC_CAN_COMM_RX_BY_CALL: u32 = 4;
pub const NC_CAN_COMM_TX_RESP_ONLY: u32 = 5;
pub const NC_CAN_COMM_TX_WAVEFORM: u32 = 6;
pub const NC_RTSI_NONE: u32 = 0;
pub const NC_RTSI_TX_ON_IN: u32 = 1;
pub const NC_RTSI_TIME_ON_IN: u32 = 2;
pub const NC_RTSI_OUT_ON_RX: u32 = 3;
pub const NC_RTSI_OUT_ON_TX: u32 = 4;
pub const NC_RTSI_OUT_ACTION_ONLY: u32 = 5;
pub const NC_RTSISIG_PULSE: u32 = 0;
pub const NC_RTSISIG_TOGGLE: u32 = 1;
pub const NC_START_TRIG_NONE: u32 = 0;
pub const NC_RESET_TIMESTAMP_ON_START: u32 = 1;
pub const NC_LOG_START_TRIG: u32 = 2;
pub const NC_FL_CAN_ARBID_XTD: u32 = 536870912;
pub const NC_CAN_ARBID_NONE: u32 = 3489660927;
pub const NC_FRMTYPE_DATA: u32 = 0;
pub const NC_FRMTYPE_REMOTE: u32 = 1;
pub const NC_FRMTYPE_COMM_ERR: u32 = 2;
pub const NC_FRMTYPE_RTSI: u32 = 3;
pub const NC_FRMTYPE_TRIG_START: u32 = 4;
pub const NC_FRMTYPE_DELAY: u32 = 5;
pub const NC_FRMTYPE_BUS_ERR: u32 = 6;
pub const NC_FRMTYPE_TRANSCEIVER_ERR: u32 = 7;
pub const NC_FRMTYPE_LIN_RESPONSE_ENTRY: u32 = 16;
pub const NC_FRMTYPE_LIN_HEADER: u32 = 17;
pub const NC_FRMTYPE_LIN_FULL: u32 = 18;
pub const NC_FRMTYPE_LIN_WAKEUP_RECEIVED: u32 = 19;
pub const NC_FRMTYPE_LIN_BUS_INACTIVE: u32 = 20;
pub const NC_FRMTYPE_LIN_BUS_ERR: u32 = 21;
pub const NC_MASK_STD_MUSTMATCH: u32 = 2047;
pub const NC_MASK_XTD_MUSTMATCH: u32 = 536870911;
pub const NC_MASK_STD_DONTCARE: u32 = 0;
pub const NC_MASK_XTD_DONTCARE: u32 = 0;
pub const NC_SERIES2_MASK_MUSTMATCH: u32 = 0;
pub const NC_SERIES2_MASK_DONTCARE: u32 = 4294967295;
pub const NC_HW_SERIES_1: u32 = 0;
pub const NC_HW_SERIES_2: u32 = 1;
pub const NC_HW_SERIES_847X: u32 = 2;
pub const NC_HW_SERIES_847X_SYNC: u32 = 3;
pub const NC_HW_SERIES_NIXNET: u32 = 4;
pub const NC_SRC_TERM_RTSI0: u32 = 0;
pub const NC_SRC_TERM_RTSI1: u32 = 1;
pub const NC_SRC_TERM_RTSI2: u32 = 2;
pub const NC_SRC_TERM_RTSI3: u32 = 3;
pub const NC_SRC_TERM_RTSI4: u32 = 4;
pub const NC_SRC_TERM_RTSI5: u32 = 5;
pub const NC_SRC_TERM_RTSI6: u32 = 6;
pub const NC_SRC_TERM_RTSI_CLOCK: u32 = 7;
pub const NC_SRC_TERM_PXI_STAR: u32 = 8;
pub const NC_SRC_TERM_INTF_RECEIVE_EVENT: u32 = 9;
pub const NC_SRC_TERM_INTF_TRANSCEIVER_EVENT: u32 = 10;
pub const NC_SRC_TERM_PXI_CLK10: u32 = 11;
pub const NC_SRC_TERM_20MHZ_TIMEBASE: u32 = 12;
pub const NC_SRC_TERM_10HZ_RESYNC_CLOCK: u32 = 13;
pub const NC_SRC_TERM_START_TRIGGER: u32 = 14;
pub const NC_DEST_TERM_RTSI0: u32 = 0;
pub const NC_DEST_TERM_RTSI1: u32 = 1;
pub const NC_DEST_TERM_RTSI2: u32 = 2;
pub const NC_DEST_TERM_RTSI3: u32 = 3;
pub const NC_DEST_TERM_RTSI4: u32 = 4;
pub const NC_DEST_TERM_RTSI5: u32 = 5;
pub const NC_DEST_TERM_RTSI6: u32 = 6;
pub const NC_DEST_TERM_RTSI_CLOCK: u32 = 7;
pub const NC_DEST_TERM_MASTER_TIMEBASE: u32 = 8;
pub const NC_DEST_TERM_10HZ_RESYNC_CLOCK: u32 = 9;
pub const NC_DEST_TERM_START_TRIGGER: u32 = 10;
pub const NC_HW_FORMFACTOR_PCI: u32 = 0;
pub const NC_HW_FORMFACTOR_PXI: u32 = 1;
pub const NC_HW_FORMFACTOR_PCMCIA: u32 = 2;
pub const NC_HW_FORMFACTOR_AT: u32 = 3;
pub const NC_HW_FORMFACTOR_USB: u32 = 4;
pub const NC_TRANSCEIVER_TYPE_HS: u32 = 0;
pub const NC_TRANSCEIVER_TYPE_LS: u32 = 1;
pub const NC_TRANSCEIVER_TYPE_SW: u32 = 2;
pub const NC_TRANSCEIVER_TYPE_EXT: u32 = 3;
pub const NC_TRANSCEIVER_TYPE_DISC: u32 = 4;
pub const NC_TRANSCEIVER_TYPE_LIN: u32 = 5;
pub const NC_TRANSCEIVER_TYPE_UNKNOWN: u32 = 255;
pub const NC_HW_TRANSCEIVER_HS: u32 = 0;
pub const NC_HW_TRANSCEIVER_LS: u32 = 1;
pub const NC_HW_TRANSCEIVER_SW: u32 = 2;
pub const NC_HW_TRANSCEIVER_EXT: u32 = 3;
pub const NC_HW_TRANSCEIVER_DISC: u32 = 4;
pub const NC_TRANSCEIVER_MODE_NORMAL: u32 = 0;
pub const NC_TRANSCEIVER_MODE_SLEEP: u32 = 1;
pub const NC_TRANSCEIVER_MODE_SW_WAKEUP: u32 = 2;
pub const NC_TRANSCEIVER_MODE_SW_HIGHSPEED: u32 = 3;
pub const NC_OUT_BEHAV_REPEAT_FINAL: u32 = 0;
pub const NC_OUT_BEHAV_CEASE_TRANSMIT: u32 = 1;
pub const NC_FILTER_SINGLE_STANDARD: u32 = 0;
pub const NC_FILTER_SINGLE_EXTENDED: u32 = 1;
pub const NC_FILTER_DUAL_STANDARD: u32 = 2;
pub const NC_FILTER_DUAL_EXTENDED: u32 = 3;
pub const NC_SRC_TERM_10HZ_RESYNC_EVENT: u32 = 13;
pub const NC_SRC_TERM_START_TRIG_EVENT: u32 = 14;
pub const NC_DEST_TERM_10HZ_RESYNC: u32 = 9;
pub const NC_DEST_TERM_START_TRIG: u32 = 10;
pub const NC_MK_VER_MAJOR: u32 = 4278190080;
pub const NC_MK_VER_MINOR: u32 = 16711680;
pub const NC_MK_VER_SUBMINOR: u32 = 65280;
pub const NC_MK_VER_BETA: u32 = 255;
pub const NC_FL_CAN_ARBID_INFO: u32 = 1073741824;
pub const NC_ARBID_INFO_RTSI_INPUT: u32 = 1;
pub const NC_CAN_MASK_STD_MUSTMATCH: u32 = 2047;
pub const NC_CAN_MASK_XTD_MUSTMATCH: u32 = 536870911;
pub const NC_CAN_MASK_STD_DONTCARE: u32 = 0;
pub const NC_CAN_MASK_XTD_DONTCARE: u32 = 0;
pub const NC_TX_MODE_IMMEDIATE: u32 = 0;
pub const NC_TX_MODE_TIMESTAMPED: u32 = 1;
pub const NC_TIME_FORMAT_ABSOLUTE: u32 = 0;
pub const NC_TIME_FORMAT_RELATIVE: u32 = 1;
pub const NC_TIMEBASE_RATE_10: u32 = 10;
pub const NC_TIMEBASE_RATE_20: u32 = 20;
pub const NCT_MAX_UNIT_LEN: u32 = 64;
pub const nctChannelConfigId_MDM: u32 = 2;
pub const nctSuccess: u32 = 0;
pub const nctPropChanStartBit: u32 = 100001;
pub const nctPropChanNumBits: u32 = 100002;
pub const nctPropChanDataType: u32 = 100003;
pub const nctPropChanByteOrder: u32 = 100004;
pub const nctPropChanScalFactor: u32 = 100005;
pub const nctPropChanScalOffset: u32 = 100006;
pub const nctPropChanMaxValue: u32 = 100007;
pub const nctPropChanMinValue: u32 = 100008;
pub const nctPropChanDefaultValue: u32 = 100009;
pub const nctPropChanUnitString: u32 = 100031;
pub const nctPropChanIsModeDependent: u32 = 100033;
pub const nctPropChanModeValue: u32 = 100034;
pub const nctPropMsgArbitrationId: u32 = 100010;
pub const nctPropMsgIsExtended: u32 = 100011;
pub const nctPropMsgByteLength: u32 = 100012;
pub const nctPropMsgDistribution: u32 = 100020;
pub const nctPropMsgName: u32 = 100032;
pub const nctPropSamplesPending: u32 = 100013;
pub const nctPropNumChannels: u32 = 100014;
pub const nctPropTimeout: u32 = 100015;
pub const nctPropInterface: u32 = 100016;
pub const nctPropSampleRate: u32 = 100017;
pub const nctPropMode: u32 = 100018;
pub const nctPropNoValue: u32 = 100019;
pub const nctPropBehavAfterFinalOut: u32 = 2147549208;
pub const nctPropIntfBaudRate: u32 = 2147483655;
pub const nctPropIntfListenOnly: u32 = 2147549200;
pub const nctPropIntfRxErrorCounter: u32 = 2147549201;
pub const nctPropIntfTxErrorCounter: u32 = 2147549202;
pub const nctPropIntfSeries2Comp: u32 = 2147549203;
pub const nctPropIntfSeries2Mask: u32 = 2147549204;
pub const nctPropIntfSeries2FilterMode: u32 = 2147549205;
pub const nctPropIntfSingleShotTx: u32 = 2147549207;
pub const nctPropIntfSelfReception: u32 = 2147549206;
pub const nctPropIntfTransceiverMode: u32 = 2147549209;
pub const nctPropIntfTransceiverExternalOut: u32 = 2147549210;
pub const nctPropIntfTransceiverExternalIn: u32 = 2147549211;
pub const nctPropIntfSeries2ErrArbCapture: u32 = 2147549212;
pub const nctPropIntfTransceiverType: u32 = 2147614727;
pub const nctPropIntfVirtualBusTiming: u32 = 2684354609;
pub const nctPropHwSerialNum: u32 = 2147614723;
pub const nctPropHwFormFactor: u32 = 2147614724;
pub const nctPropHwSeries: u32 = 2147614725;
pub const nctPropHwTransceiver: u32 = 2147614727;
pub const nctPropHwMasterTimebaseRate: u32 = 2147614771;
pub const nctPropHwTimestampFormat: u32 = 2147614770;
pub const nctPropVersionMajor: u32 = 2147614729;
pub const nctPropVersionMinor: u32 = 2147614730;
pub const nctPropVersionUpdate: u32 = 2147614731;
pub const nctPropVersionPhase: u32 = 2147614732;
pub const nctPropVersionBuild: u32 = 2147614733;
pub const nctPropVersionComment: u32 = 2147614734;
pub const nctModeInput: u32 = 0;
pub const nctModeOutput: u32 = 1;
pub const nctModeTimestampedInput: u32 = 2;
pub const nctModeOutputRecent: u32 = 3;
pub const nctDataSigned: u32 = 0;
pub const nctDataUnsigned: u32 = 1;
pub const nctDataFloat: u32 = 2;
pub const nctOrderIntel: u32 = 0;
pub const nctOrderMotorola: u32 = 1;
pub const nctHwSeries1: u32 = 0;
pub const nctHwSeries2: u32 = 1;
pub const nctHwSeriesNIXNET: u32 = 4;
pub const nctHwTimebaseRate10: u32 = 10;
pub const nctHwTimebaseRate20: u32 = 20;
pub const nctHwTimeFormatAbsolute: u32 = 0;
pub const nctHwTimeFormatRelative: u32 = 1;
pub const nctSrcTermRTSI0: u32 = 0;
pub const nctSrcTermRTSI1: u32 = 1;
pub const nctSrcTermRTSI2: u32 = 2;
pub const nctSrcTermRTSI3: u32 = 3;
pub const nctSrcTermRTSI4: u32 = 4;
pub const nctSrcTermRTSI5: u32 = 5;
pub const nctSrcTermRTSI6: u32 = 6;
pub const nctSrcTermRTSI_Clock: u32 = 7;
pub const nctSrcTermPXI_Star: u32 = 8;
pub const nctSrcTermIntfReceiveEvent: u32 = 9;
pub const nctSrcTermIntfTransceiverEvent: u32 = 10;
pub const nctSrcTermPXI_Clk10: u32 = 11;
pub const nctSrcTerm20MHzTimebase: u32 = 12;
pub const nctSrcTerm10HzResyncClock: u32 = 13;
pub const nctSrcTermStartTrigger: u32 = 14;
pub const nctDestTermRTSI0: u32 = 0;
pub const nctDestTermRTSI1: u32 = 1;
pub const nctDestTermRTSI2: u32 = 2;
pub const nctDestTermRTSI3: u32 = 3;
pub const nctDestTermRTSI4: u32 = 4;
pub const nctDestTermRTSI5: u32 = 5;
pub const nctDestTermRTSI6: u32 = 6;
pub const nctDestTermRTSI_Clock: u32 = 7;
pub const nctDestTermMasterTimebase: u32 = 8;
pub const nctDestTerm10HzResyncClock: u32 = 9;
pub const nctDestTermStartTrigger: u32 = 10;
pub const nctHwFormFactorPCI: u32 = 0;
pub const nctHwFormFactorPXI: u32 = 1;
pub const nctHwFormFactorPCMCIA: u32 = 2;
pub const nctHwFormFactorAT: u32 = 3;
pub const nctTransceiverTypeHS: u32 = 0;
pub const nctTransceiverTypeLS: u32 = 1;
pub const nctTransceiverTypeSW: u32 = 2;
pub const nctTransceiverTypeExternal: u32 = 3;
pub const nctTransceiverTypeDisconnect: u32 = 4;
pub const nctHwTransceiverHS: u32 = 0;
pub const nctHwTransceiverLS: u32 = 1;
pub const nctHwTransceiverSW: u32 = 2;
pub const nctHwTransceiverExternal: u32 = 3;
pub const nctHwTransceiverDisconnect: u32 = 4;
pub const nctTransceiverModeNormal: u32 = 0;
pub const nctTransceiverModeSleep: u32 = 1;
pub const nctTransceiverModeSWWakeup: u32 = 2;
pub const nctTransceiverModeSWHighSpeed: u32 = 3;
pub const nctFilterSingleStandard: u32 = 0;
pub const nctFilterSingleExtended: u32 = 1;
pub const nctFilterDualStandard: u32 = 2;
pub const nctFilterDualExtended: u32 = 3;
pub const nctOutBehavRepeatFinalSample: u32 = 0;
pub const nctOutBehavCeaseTransmit: u32 = 1;
pub const nctDistrUniform: u32 = 0;
pub const nctDistrBurst: u32 = 1;
pub const nctGetNamesModeChannels: u32 = 0;
pub const nctGetNamesModeMessages: u32 = 1;
pub const nctSrcTermRTSI_CLOCK: u32 = 7;
pub const nctSrcTermPXI_STAR: u32 = 8;
pub const nctSrcTermPXI_CLK10: u32 = 11;
pub const nctSrcTermStartTrigEvent: u32 = 14;
pub const nctDestTermRTSI_CLOCK: u32 = 7;
pub const nctSrcTerm10HzResyncEvent: u32 = 13;
pub const nctDestTerm10HzResync: u32 = 9;
pub const nctDestTermStartTrig: u32 = 10;
pub const NC_MAX_WRITE_MULT: u32 = 512;
pub const NC_MAX_SERV_DATA: u32 = 240;
pub const NC_ATTR_MAC_ID: u32 = 2147483776;
pub const NC_ATTR_VENDOR_ID: u32 = 2147483778;
pub const NC_ATTR_PRODUCT_CODE: u32 = 2147483779;
pub const NC_ATTR_DEVICE_TYPE: u32 = 2147483780;
pub const NC_ATTR_IN_LEN: u32 = 2147483793;
pub const NC_ATTR_OUT_LEN: u32 = 2147483794;
pub const NC_ATTR_EXP_PACKET_RATE: u32 = 2147483797;
pub const NC_ATTR_ACK_SUPPRESS: u32 = 2147483802;
pub const NC_ATTR_INHIBIT_TIMER: u32 = 2147483799;
pub const NC_ATTR_ACK_TIMER: u32 = 2147483798;
pub const NC_ATTR_KEEP_EXPL_MSG: u32 = 2147483801;
pub const NC_ATTR_POLL_MODE: u32 = 2147483803;
pub const NC_ATTR_EM_INHIBIT_TIMER: u32 = 2147483791;
pub const NC_POLL_AUTO: u32 = 0;
pub const NC_POLL_SCAN: u32 = 1;
pub const NC_POLL_INDIV: u32 = 2;
pub const NC_CONN_POLL: u32 = 0;
pub const NC_CONN_STROBE: u32 = 1;
pub const NC_CONN_COS: u32 = 2;
pub const NC_CONN_CYCLIC: u32 = 3;
pub type NCTYPE_INT8 = ::std::os::raw::c_char;
pub type NCTYPE_INT16 = ::std::os::raw::c_short;
pub type NCTYPE_INT32 = ::std::os::raw::c_long;
pub type NCTYPE_UINT8 = ::std::os::raw::c_uchar;
pub type NCTYPE_UINT16 = ::std::os::raw::c_ushort;
pub type NCTYPE_UINT32 = ::std::os::raw::c_ulong;
pub type NCTYPE_REAL = f32;
pub type NCTYPE_LREAL = f64;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NCTYPE_UINT64 {
    pub LowPart: NCTYPE_UINT32,
    pub HighPart: NCTYPE_UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NCTYPE_UINT64"][::std::mem::size_of::<NCTYPE_UINT64>() - 8usize];
    ["Alignment of NCTYPE_UINT64"][::std::mem::align_of::<NCTYPE_UINT64>() - 2usize];
    ["Offset of field: NCTYPE_UINT64::LowPart"]
        [::std::mem::offset_of!(NCTYPE_UINT64, LowPart) - 0usize];
    ["Offset of field: NCTYPE_UINT64::HighPart"]
        [::std::mem::offset_of!(NCTYPE_UINT64, HighPart) - 4usize];
};
pub type NCTYPE_BOOL = ::std::os::raw::c_uchar;
pub type NCTYPE_STRING = *mut ::std::os::raw::c_char;
pub type NCTYPE_STATUS = NCTYPE_INT32;
pub type NCTYPE_OBJH = NCTYPE_UINT32;
pub type NCTYPE_VERSION = NCTYPE_UINT32;
pub type NCTYPE_DURATION = NCTYPE_UINT32;
pub type NCTYPE_ATTRID = NCTYPE_UINT32;
pub type NCTYPE_OPCODE = NCTYPE_UINT32;
pub type NCTYPE_PROTOCOL = NCTYPE_UINT32;
pub type NCTYPE_BAUD_RATE = NCTYPE_UINT32;
pub type NCTYPE_STATE = NCTYPE_UINT32;
pub type NCTYPE_ANY_P = *mut ::std::os::raw::c_void;
pub type NCTYPE_INT8_P = *mut NCTYPE_INT8;
pub type NCTYPE_INT16_P = *mut NCTYPE_INT16;
pub type NCTYPE_INT32_P = *mut NCTYPE_INT32;
pub type NCTYPE_UINT8_P = *mut NCTYPE_UINT8;
pub type NCTYPE_UINT16_P = *mut NCTYPE_UINT16;
pub type NCTYPE_UINT32_P = *mut NCTYPE_UINT32;
pub type NCTYPE_REAL_P = *mut NCTYPE_REAL;
pub type NCTYPE_LREAL_P = *mut NCTYPE_LREAL;
pub type NCTYPE_UINT64_P = *mut NCTYPE_UINT64;
pub type NCTYPE_BOOL_P = *mut NCTYPE_BOOL;
pub type NCTYPE_STATUS_P = *mut NCTYPE_STATUS;
pub type NCTYPE_OBJH_P = *mut NCTYPE_OBJH;
pub type NCTYPE_VERSION_P = *mut NCTYPE_VERSION;
pub type NCTYPE_DURATION_P = *mut NCTYPE_DURATION;
pub type NCTYPE_ATTRID_P = *mut NCTYPE_ATTRID;
pub type NCTYPE_OPCODE_P = *mut NCTYPE_OPCODE;
pub type NCTYPE_PROTOCOL_P = *mut NCTYPE_PROTOCOL;
pub type NCTYPE_BAUD_RATE_P = *mut NCTYPE_BAUD_RATE;
pub type NCTYPE_STATE_P = *mut NCTYPE_STATE;
pub type NCTYPE_NOTIFY_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ObjHandle: NCTYPE_OBJH,
        CurrentState: NCTYPE_STATE,
        Status: NCTYPE_STATUS,
        RefData: NCTYPE_ANY_P,
    ) -> NCTYPE_STATE,
>;
pub type NCTYPE_COMM_TYPE = NCTYPE_UINT32;
pub type NCTYPE_RTSI_MODE = NCTYPE_UINT32;
pub type NCTYPE_RTSI_SIG_BEHAV = NCTYPE_UINT32;
pub type NCTYPE_ABS_TIME = NCTYPE_UINT64;
pub type NCTYPE_CAN_ARBID = NCTYPE_UINT32;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NCTYPE_CAN_FRAME {
    pub ArbitrationId: NCTYPE_CAN_ARBID,
    pub IsRemote: NCTYPE_BOOL,
    pub DataLength: NCTYPE_UINT8,
    pub Data: [NCTYPE_UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NCTYPE_CAN_FRAME"][::std::mem::size_of::<NCTYPE_CAN_FRAME>() - 14usize];
    ["Alignment of NCTYPE_CAN_FRAME"][::std::mem::align_of::<NCTYPE_CAN_FRAME>() - 2usize];
    ["Offset of field: NCTYPE_CAN_FRAME::ArbitrationId"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME, ArbitrationId) - 0usize];
    ["Offset of field: NCTYPE_CAN_FRAME::IsRemote"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME, IsRemote) - 4usize];
    ["Offset of field: NCTYPE_CAN_FRAME::DataLength"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME, DataLength) - 5usize];
    ["Offset of field: NCTYPE_CAN_FRAME::Data"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME, Data) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NCTYPE_CAN_FRAME_TIMED {
    pub Timestamp: NCTYPE_ABS_TIME,
    pub ArbitrationId: NCTYPE_CAN_ARBID,
    pub IsRemote: NCTYPE_BOOL,
    pub DataLength: NCTYPE_UINT8,
    pub Data: [NCTYPE_UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NCTYPE_CAN_FRAME_TIMED"][::std::mem::size_of::<NCTYPE_CAN_FRAME_TIMED>() - 22usize];
    ["Alignment of NCTYPE_CAN_FRAME_TIMED"]
        [::std::mem::align_of::<NCTYPE_CAN_FRAME_TIMED>() - 2usize];
    ["Offset of field: NCTYPE_CAN_FRAME_TIMED::Timestamp"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME_TIMED, Timestamp) - 0usize];
    ["Offset of field: NCTYPE_CAN_FRAME_TIMED::ArbitrationId"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME_TIMED, ArbitrationId) - 8usize];
    ["Offset of field: NCTYPE_CAN_FRAME_TIMED::IsRemote"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME_TIMED, IsRemote) - 12usize];
    ["Offset of field: NCTYPE_CAN_FRAME_TIMED::DataLength"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME_TIMED, DataLength) - 13usize];
    ["Offset of field: NCTYPE_CAN_FRAME_TIMED::Data"]
        [::std::mem::offset_of!(NCTYPE_CAN_FRAME_TIMED, Data) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NCTYPE_CAN_STRUCT {
    pub Timestamp: NCTYPE_ABS_TIME,
    pub ArbitrationId: NCTYPE_CAN_ARBID,
    pub FrameType: NCTYPE_UINT8,
    pub DataLength: NCTYPE_UINT8,
    pub Data: [NCTYPE_UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NCTYPE_CAN_STRUCT"][::std::mem::size_of::<NCTYPE_CAN_STRUCT>() - 22usize];
    ["Alignment of NCTYPE_CAN_STRUCT"][::std::mem::align_of::<NCTYPE_CAN_STRUCT>() - 2usize];
    ["Offset of field: NCTYPE_CAN_STRUCT::Timestamp"]
        [::std::mem::offset_of!(NCTYPE_CAN_STRUCT, Timestamp) - 0usize];
    ["Offset of field: NCTYPE_CAN_STRUCT::ArbitrationId"]
        [::std::mem::offset_of!(NCTYPE_CAN_STRUCT, ArbitrationId) - 8usize];
    ["Offset of field: NCTYPE_CAN_STRUCT::FrameType"]
        [::std::mem::offset_of!(NCTYPE_CAN_STRUCT, FrameType) - 12usize];
    ["Offset of field: NCTYPE_CAN_STRUCT::DataLength"]
        [::std::mem::offset_of!(NCTYPE_CAN_STRUCT, DataLength) - 13usize];
    ["Offset of field: NCTYPE_CAN_STRUCT::Data"]
        [::std::mem::offset_of!(NCTYPE_CAN_STRUCT, Data) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NCTYPE_CAN_DATA {
    pub Data: [NCTYPE_UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NCTYPE_CAN_DATA"][::std::mem::size_of::<NCTYPE_CAN_DATA>() - 8usize];
    ["Alignment of NCTYPE_CAN_DATA"][::std::mem::align_of::<NCTYPE_CAN_DATA>() - 1usize];
    ["Offset of field: NCTYPE_CAN_DATA::Data"]
        [::std::mem::offset_of!(NCTYPE_CAN_DATA, Data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NCTYPE_CAN_DATA_TIMED {
    pub Timestamp: NCTYPE_ABS_TIME,
    pub Data: [NCTYPE_UINT8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NCTYPE_CAN_DATA_TIMED"][::std::mem::size_of::<NCTYPE_CAN_DATA_TIMED>() - 16usize];
    ["Alignment of NCTYPE_CAN_DATA_TIMED"]
        [::std::mem::align_of::<NCTYPE_CAN_DATA_TIMED>() - 2usize];
    ["Offset of field: NCTYPE_CAN_DATA_TIMED::Timestamp"]
        [::std::mem::offset_of!(NCTYPE_CAN_DATA_TIMED, Timestamp) - 0usize];
    ["Offset of field: NCTYPE_CAN_DATA_TIMED::Data"]
        [::std::mem::offset_of!(NCTYPE_CAN_DATA_TIMED, Data) - 8usize];
};
pub type NCTYPE_COMM_TYPE_P = *mut NCTYPE_COMM_TYPE;
pub type NCTYPE_ABS_TIME_P = *mut NCTYPE_ABS_TIME;
pub type NCTYPE_CAN_ARBID_P = *mut NCTYPE_CAN_ARBID;
pub type NCTYPE_CAN_FRAME_P = *mut NCTYPE_CAN_FRAME;
pub type NCTYPE_CAN_FRAME_TIMED_P = *mut NCTYPE_CAN_FRAME_TIMED;
pub type NCTYPE_CAN_STRUCT_P = *mut NCTYPE_CAN_STRUCT;
pub type NCTYPE_CAN_DATA_P = *mut NCTYPE_CAN_DATA;
pub type NCTYPE_CAN_DATA_TIMED_P = *mut NCTYPE_CAN_DATA_TIMED;
pub type NCTYPE_RTSI_MODE_P = *mut NCTYPE_RTSI_MODE;
pub type NCTYPE_RTSI_SIG_BEHAV_P = *mut NCTYPE_RTSI_SIG_BEHAV;
pub type NCTYPE_BKD_TYPE = NCTYPE_UINT32;
pub type NCTYPE_BKD_WHEN = NCTYPE_UINT32;
pub type NCTYPE_BKD_TYPE_P = *mut NCTYPE_BKD_TYPE;
pub type NCTYPE_BKD_WHEN_P = *mut NCTYPE_BKD_WHEN;
// extern "C" {
//     pub fn ncAction(
//         ObjHandle: NCTYPE_OBJH,
//         Opcode: NCTYPE_OPCODE,
//         Param: NCTYPE_UINT32,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncCloseObject(ObjHandle: NCTYPE_OBJH) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncConfig(
//         ObjName: NCTYPE_STRING,
//         NumAttrs: NCTYPE_UINT32,
//         AttrIdList: NCTYPE_ATTRID_P,
//         AttrValueList: NCTYPE_UINT32_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncConnectTerminals(
//         ObjHandle: NCTYPE_OBJH,
//         SourceTerminal: NCTYPE_UINT32,
//         DestinationTerminal: NCTYPE_UINT32,
//         Modifiers: NCTYPE_UINT32,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncDisconnectTerminals(
//         ObjHandle: NCTYPE_OBJH,
//         SourceTerminal: NCTYPE_UINT32,
//         DestinationTerminal: NCTYPE_UINT32,
//         Modifiers: NCTYPE_UINT32,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncCreateNotification(
//         ObjHandle: NCTYPE_OBJH,
//         DesiredState: NCTYPE_STATE,
//         Timeout: NCTYPE_DURATION,
//         RefData: NCTYPE_ANY_P,
//         Callback: NCTYPE_NOTIFY_CALLBACK,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncGetAttribute(
//         ObjHandle: NCTYPE_OBJH,
//         AttrId: NCTYPE_ATTRID,
//         SizeofAttr: NCTYPE_UINT32,
//         Attr: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncGetHardwareInfo(
//         CardIndex: NCTYPE_UINT32,
//         PortIndex: NCTYPE_UINT32,
//         AttrId: NCTYPE_ATTRID,
//         AttrSize: NCTYPE_UINT32,
//         Attr: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncOpenObject(ObjName: NCTYPE_STRING, ObjHandle: NCTYPE_OBJH_P) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncRead(
//         ObjHandle: NCTYPE_OBJH,
//         SizeofData: NCTYPE_UINT32,
//         Data: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncReadMult(
//         ObjHandle: NCTYPE_OBJH,
//         SizeofData: NCTYPE_UINT32,
//         Data: NCTYPE_ANY_P,
//         ActualDataSize: NCTYPE_UINT32_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncReset(IntfName: NCTYPE_STRING, Param: NCTYPE_UINT32) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncSetAttribute(
//         ObjHandle: NCTYPE_OBJH,
//         AttrId: NCTYPE_ATTRID,
//         SizeofAttr: NCTYPE_UINT32,
//         Attr: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncStatusToString(
//         Status: NCTYPE_STATUS,
//         SizeofString: NCTYPE_UINT32,
//         ErrorString: NCTYPE_STRING,
//     );
// }
// extern "C" {
//     pub fn ncWaitForState(
//         ObjHandle: NCTYPE_OBJH,
//         DesiredState: NCTYPE_STATE,
//         Timeout: NCTYPE_DURATION,
//         CurrentState: NCTYPE_STATE_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncWrite(
//         ObjHandle: NCTYPE_OBJH,
//         SizeofData: NCTYPE_UINT32,
//         Data: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncWriteMult(
//         ObjHandle: NCTYPE_OBJH,
//         SizeofData: NCTYPE_UINT32,
//         FrameArray: NCTYPE_CAN_STRUCT_P,
//     ) -> NCTYPE_STATUS;
// }
// pub type i8_ = ::std::os::raw::c_schar;
// pub type i16_ = ::std::os::raw::c_short;
// pub type i32_ = ::std::os::raw::c_long;
// pub type u8_ = ::std::os::raw::c_uchar;
// pub type u16_ = ::std::os::raw::c_ushort;
// pub type u32_ = ::std::os::raw::c_ulong;
// pub type f32_ = f32;
// pub type f64_ = f64;
// pub type str_ = *mut ::std::os::raw::c_char;
// pub type cstr = *const ::std::os::raw::c_char;
// pub type nctTypeTaskRef = u32_;
// pub type nctTypeStatus = i32_;
// #[repr(C, packed(2))]
// #[derive(Debug, Copy, Clone)]
// pub struct nctTypeTimestamp {
//     pub LowPart: u32_,
//     pub HighPart: u32_,
// }
// #[allow(clippy::unnecessary_operation, clippy::identity_op)]
// const _: () = {
//     ["Size of nctTypeTimestamp"][::std::mem::size_of::<nctTypeTimestamp>() - 8usize];
//     ["Alignment of nctTypeTimestamp"][::std::mem::align_of::<nctTypeTimestamp>() - 2usize];
//     ["Offset of field: nctTypeTimestamp::LowPart"]
//         [::std::mem::offset_of!(nctTypeTimestamp, LowPart) - 0usize];
//     ["Offset of field: nctTypeTimestamp::HighPart"]
//         [::std::mem::offset_of!(nctTypeTimestamp, HighPart) - 4usize];
// };
// #[repr(C, packed(2))]
// #[derive(Debug, Copy, Clone)]
// pub struct nctTypeMessageConfig {
//     pub MsgArbitrationID: i32_,
//     pub MsgDataBytes: i32_,
//     pub Extended: i32_,
// }
// #[allow(clippy::unnecessary_operation, clippy::identity_op)]
// const _: () = {
//     ["Size of nctTypeMessageConfig"][::std::mem::size_of::<nctTypeMessageConfig>() - 12usize];
//     ["Alignment of nctTypeMessageConfig"][::std::mem::align_of::<nctTypeMessageConfig>() - 2usize];
//     ["Offset of field: nctTypeMessageConfig::MsgArbitrationID"]
//         [::std::mem::offset_of!(nctTypeMessageConfig, MsgArbitrationID) - 0usize];
//     ["Offset of field: nctTypeMessageConfig::MsgDataBytes"]
//         [::std::mem::offset_of!(nctTypeMessageConfig, MsgDataBytes) - 4usize];
//     ["Offset of field: nctTypeMessageConfig::Extended"]
//         [::std::mem::offset_of!(nctTypeMessageConfig, Extended) - 8usize];
// };
// #[repr(C, packed(2))]
// #[derive(Debug, Copy, Clone)]
// pub struct nctTypeChannelConfig {
//     pub StartBit: i32_,
//     pub NumBits: i32_,
//     pub DataType: i32_,
//     pub ByteOrder: i32_,
//     pub ScalingFactor: f64_,
//     pub ScalingOffset: f64_,
//     pub MaxValue: f64_,
//     pub MinValue: f64_,
//     pub DefaultValue: f64_,
//     pub Unit: [::std::os::raw::c_char; 64usize],
// }
// #[allow(clippy::unnecessary_operation, clippy::identity_op)]
// const _: () = {
//     ["Size of nctTypeChannelConfig"][::std::mem::size_of::<nctTypeChannelConfig>() - 120usize];
//     ["Alignment of nctTypeChannelConfig"][::std::mem::align_of::<nctTypeChannelConfig>() - 2usize];
//     ["Offset of field: nctTypeChannelConfig::StartBit"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, StartBit) - 0usize];
//     ["Offset of field: nctTypeChannelConfig::NumBits"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, NumBits) - 4usize];
//     ["Offset of field: nctTypeChannelConfig::DataType"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, DataType) - 8usize];
//     ["Offset of field: nctTypeChannelConfig::ByteOrder"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, ByteOrder) - 12usize];
//     ["Offset of field: nctTypeChannelConfig::ScalingFactor"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, ScalingFactor) - 16usize];
//     ["Offset of field: nctTypeChannelConfig::ScalingOffset"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, ScalingOffset) - 24usize];
//     ["Offset of field: nctTypeChannelConfig::MaxValue"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, MaxValue) - 32usize];
//     ["Offset of field: nctTypeChannelConfig::MinValue"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, MinValue) - 40usize];
//     ["Offset of field: nctTypeChannelConfig::DefaultValue"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, DefaultValue) - 48usize];
//     ["Offset of field: nctTypeChannelConfig::Unit"]
//         [::std::mem::offset_of!(nctTypeChannelConfig, Unit) - 56usize];
// };
// #[repr(C, packed(2))]
// #[derive(Debug, Copy, Clone)]
// pub struct nctTypeModeChanConfig {
//     pub ModeValue: u32_,
//     pub StartBit: i32_,
//     pub NumBits: i32_,
//     pub ByteOrder: i32_,
//     pub DefaultValue: u32_,
// }
// #[allow(clippy::unnecessary_operation, clippy::identity_op)]
// const _: () = {
//     ["Size of nctTypeModeChanConfig"][::std::mem::size_of::<nctTypeModeChanConfig>() - 20usize];
//     ["Alignment of nctTypeModeChanConfig"]
//         [::std::mem::align_of::<nctTypeModeChanConfig>() - 2usize];
//     ["Offset of field: nctTypeModeChanConfig::ModeValue"]
//         [::std::mem::offset_of!(nctTypeModeChanConfig, ModeValue) - 0usize];
//     ["Offset of field: nctTypeModeChanConfig::StartBit"]
//         [::std::mem::offset_of!(nctTypeModeChanConfig, StartBit) - 4usize];
//     ["Offset of field: nctTypeModeChanConfig::NumBits"]
//         [::std::mem::offset_of!(nctTypeModeChanConfig, NumBits) - 8usize];
//     ["Offset of field: nctTypeModeChanConfig::ByteOrder"]
//         [::std::mem::offset_of!(nctTypeModeChanConfig, ByteOrder) - 12usize];
//     ["Offset of field: nctTypeModeChanConfig::DefaultValue"]
//         [::std::mem::offset_of!(nctTypeModeChanConfig, DefaultValue) - 16usize];
// };
// #[repr(C, packed(2))]
// #[derive(Debug, Copy, Clone)]
// pub struct nctTypeChannelConfigMDM {
//     pub StartBit: i32_,
//     pub NumBits: i32_,
//     pub DataType: i32_,
//     pub ByteOrder: i32_,
//     pub ScalingFactor: f64_,
//     pub ScalingOffset: f64_,
//     pub MaxValue: f64_,
//     pub MinValue: f64_,
//     pub DefaultValue: f64_,
//     pub Unit: [::std::os::raw::c_char; 64usize],
//     pub NumModeChannels: i32_,
//     pub ModeChannel: nctTypeModeChanConfig,
// }
// #[allow(clippy::unnecessary_operation, clippy::identity_op)]
// const _: () = {
//     ["Size of nctTypeChannelConfigMDM"]
//         [::std::mem::size_of::<nctTypeChannelConfigMDM>() - 144usize];
//     ["Alignment of nctTypeChannelConfigMDM"]
//         [::std::mem::align_of::<nctTypeChannelConfigMDM>() - 2usize];
//     ["Offset of field: nctTypeChannelConfigMDM::StartBit"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, StartBit) - 0usize];
//     ["Offset of field: nctTypeChannelConfigMDM::NumBits"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, NumBits) - 4usize];
//     ["Offset of field: nctTypeChannelConfigMDM::DataType"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, DataType) - 8usize];
//     ["Offset of field: nctTypeChannelConfigMDM::ByteOrder"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, ByteOrder) - 12usize];
//     ["Offset of field: nctTypeChannelConfigMDM::ScalingFactor"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, ScalingFactor) - 16usize];
//     ["Offset of field: nctTypeChannelConfigMDM::ScalingOffset"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, ScalingOffset) - 24usize];
//     ["Offset of field: nctTypeChannelConfigMDM::MaxValue"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, MaxValue) - 32usize];
//     ["Offset of field: nctTypeChannelConfigMDM::MinValue"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, MinValue) - 40usize];
//     ["Offset of field: nctTypeChannelConfigMDM::DefaultValue"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, DefaultValue) - 48usize];
//     ["Offset of field: nctTypeChannelConfigMDM::Unit"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, Unit) - 56usize];
//     ["Offset of field: nctTypeChannelConfigMDM::NumModeChannels"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, NumModeChannels) - 120usize];
//     ["Offset of field: nctTypeChannelConfigMDM::ModeChannel"]
//         [::std::mem::offset_of!(nctTypeChannelConfigMDM, ModeChannel) - 124usize];
// };
// extern "C" {
//     pub fn nctClear(TaskRef: nctTypeTaskRef) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctConnectTerminals(
//         TaskRef: nctTypeTaskRef,
//         SourceTerminal: u32_,
//         DestinationTerminal: u32_,
//         Modifiers: u32_,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctCreateMessage(
//         MessageConfig: *mut nctTypeMessageConfig,
//         NumberOfChannels: u32_,
//         ChannelConfigList: *mut nctTypeChannelConfig,
//         Interface: i32_,
//         Mode: i32_,
//         SampleRate: f64_,
//         TaskRef: *mut nctTypeTaskRef,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctCreateMessageEx(
//         ConfigId: u32_,
//         MessageConfig: *mut ::std::os::raw::c_void,
//         NumberOfChannels: u32_,
//         ChannelConfigList: *mut ::std::os::raw::c_void,
//         Interface: i32_,
//         Mode: i32_,
//         SampleRate: f64_,
//         TaskRef: *mut nctTypeTaskRef,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctDisconnectTerminals(
//         TaskRef: nctTypeTaskRef,
//         SourceTerminal: u32_,
//         DestinationTerminal: u32_,
//         Modifiers: u32_,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctGetNames(
//         FilePath: cstr,
//         Mode: u32_,
//         MessageName: cstr,
//         SizeofChannelList: u32_,
//         ChannelList: str_,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctGetNamesLength(
//         FilePath: cstr,
//         Mode: u32_,
//         MessageName: cstr,
//         SizeOfNames: *mut u32_,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctGetProperty(
//         TaskRef: nctTypeTaskRef,
//         ChannelName: cstr,
//         PropertyId: u32_,
//         SizeofValue: u32_,
//         Value: *mut ::std::os::raw::c_void,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctInitialize(
//         ChannelList: cstr,
//         Interface: i32_,
//         Mode: i32_,
//         SampleRate: f64_,
//         TaskRef: *mut nctTypeTaskRef,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctInitStart(
//         ChannelList: cstr,
//         Interface: i32_,
//         Mode: i32_,
//         SampleRate: f64_,
//         TaskRef: *mut nctTypeTaskRef,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctRead(
//         TaskRef: nctTypeTaskRef,
//         NumberOfSamplesToRead: u32_,
//         StartTime: *mut nctTypeTimestamp,
//         DeltaTime: *mut nctTypeTimestamp,
//         SampleArray: *mut f64_,
//         NumberOfSamplesReturned: *mut u32_,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctReadTimestamped(
//         TaskRef: nctTypeTaskRef,
//         NumberOfSamplesToRead: u32_,
//         TimestampArray: *mut nctTypeTimestamp,
//         SampleArray: *mut f64_,
//         NumberOfSamplesReturned: *mut u32_,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctStart(TaskRef: nctTypeTaskRef) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctStop(TaskRef: nctTypeTaskRef) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctSetProperty(
//         TaskRef: nctTypeTaskRef,
//         ChannelName: cstr,
//         PropertyId: u32_,
//         SizeofValue: u32_,
//         Value: *mut ::std::os::raw::c_void,
//     ) -> nctTypeStatus;
// }
// extern "C" {
//     pub fn nctWrite(
//         TaskRef: nctTypeTaskRef,
//         NumberOfSamplesToWrite: u32_,
//         SampleArray: *mut f64_,
//     ) -> nctTypeStatus;
// }
// pub type NCTYPE_POLL_MODE = NCTYPE_UINT32;
// pub type NCTYPE_CONN_TYPE = NCTYPE_UINT32;
// pub type NCTYPE_ITEMTYPE = NCTYPE_UINT8;
// #[repr(C)]
// #[derive(Debug, Copy, Clone)]
// pub struct NCTYPE_DNET_EXPL_MSG_READ {
//     pub ServiceCode: NCTYPE_UINT16,
//     pub ServDataLength: NCTYPE_UINT16,
//     pub ServData: [NCTYPE_UINT8; 240usize],
// }
// #[allow(clippy::unnecessary_operation, clippy::identity_op)]
// const _: () = {
//     ["Size of NCTYPE_DNET_EXPL_MSG_READ"]
//         [::std::mem::size_of::<NCTYPE_DNET_EXPL_MSG_READ>() - 244usize];
//     ["Alignment of NCTYPE_DNET_EXPL_MSG_READ"]
//         [::std::mem::align_of::<NCTYPE_DNET_EXPL_MSG_READ>() - 2usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_READ::ServiceCode"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_READ, ServiceCode) - 0usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_READ::ServDataLength"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_READ, ServDataLength) - 2usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_READ::ServData"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_READ, ServData) - 4usize];
// };
// #[repr(C)]
// #[derive(Debug, Copy, Clone)]
// pub struct NCTYPE_DNET_EXPL_MSG_WRITE {
//     pub ServiceCode: NCTYPE_UINT16,
//     pub ClassId: NCTYPE_UINT16,
//     pub InstanceId: NCTYPE_UINT16,
//     pub ServDataLength: NCTYPE_UINT16,
//     pub ServData: [NCTYPE_UINT8; 240usize],
// }
// #[allow(clippy::unnecessary_operation, clippy::identity_op)]
// const _: () = {
//     ["Size of NCTYPE_DNET_EXPL_MSG_WRITE"]
//         [::std::mem::size_of::<NCTYPE_DNET_EXPL_MSG_WRITE>() - 248usize];
//     ["Alignment of NCTYPE_DNET_EXPL_MSG_WRITE"]
//         [::std::mem::align_of::<NCTYPE_DNET_EXPL_MSG_WRITE>() - 2usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_WRITE::ServiceCode"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_WRITE, ServiceCode) - 0usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_WRITE::ClassId"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_WRITE, ClassId) - 2usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_WRITE::InstanceId"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_WRITE, InstanceId) - 4usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_WRITE::ServDataLength"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_WRITE, ServDataLength) - 6usize];
//     ["Offset of field: NCTYPE_DNET_EXPL_MSG_WRITE::ServData"]
//         [::std::mem::offset_of!(NCTYPE_DNET_EXPL_MSG_WRITE, ServData) - 8usize];
// };
// extern "C" {
//     pub fn ncGetDnetAttribute(
//         ObjHandle: NCTYPE_OBJH,
//         ClassId: NCTYPE_UINT16,
//         InstanceId: NCTYPE_UINT16,
//         AttributeId: NCTYPE_UINT8,
//         Timeout: NCTYPE_DURATION,
//         SizeofAttrData: NCTYPE_UINT16,
//         AttrData: NCTYPE_ANY_P,
//         ActualAttrDataLength: NCTYPE_UINT16_P,
//         DeviceError: NCTYPE_UINT16_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncGetDriverAttr(
//         ObjHandle: NCTYPE_OBJH,
//         AttrId: NCTYPE_ATTRID,
//         SizeofAttr: NCTYPE_UINT32,
//         Attr: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncOpenDnetExplMsg(
//         IntfName: NCTYPE_STRING,
//         DeviceMacId: NCTYPE_UINT32,
//         ObjHandle: NCTYPE_OBJH_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncOpenDnetIntf(
//         IntfName: NCTYPE_STRING,
//         IntfMacId: NCTYPE_UINT32,
//         BaudRate: NCTYPE_UINT32,
//         PollMode: NCTYPE_POLL_MODE,
//         ObjHandle: NCTYPE_OBJH_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncOpenDnetIO(
//         IntfName: NCTYPE_STRING,
//         DeviceMacId: NCTYPE_UINT32,
//         ConnectionType: NCTYPE_CONN_TYPE,
//         InputLength: NCTYPE_UINT32,
//         OutputLength: NCTYPE_UINT32,
//         ExpPacketRate: NCTYPE_UINT32,
//         ObjHandle: NCTYPE_OBJH_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncOperateDnetIntf(
//         ObjHandle: NCTYPE_OBJH,
//         Opcode: NCTYPE_OPCODE,
//         Param: NCTYPE_UINT32,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncReadDnetExplMsg(
//         ObjHandle: NCTYPE_OBJH,
//         ServiceCode: NCTYPE_UINT8_P,
//         SizeofServData: NCTYPE_UINT16,
//         ServData: NCTYPE_ANY_P,
//         ActualServDataLength: NCTYPE_UINT16_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncReadDnetIO(
//         ObjHandle: NCTYPE_OBJH,
//         SizeofData: NCTYPE_UINT32,
//         Data: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncSetDnetAttribute(
//         ObjHandle: NCTYPE_OBJH,
//         ClassId: NCTYPE_UINT16,
//         InstanceId: NCTYPE_UINT16,
//         AttributeId: NCTYPE_UINT8,
//         Timeout: NCTYPE_DURATION,
//         AttrDataLength: NCTYPE_UINT16,
//         AttrData: NCTYPE_ANY_P,
//         DeviceError: NCTYPE_UINT16_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncSetDriverAttr(
//         ObjHandle: NCTYPE_OBJH,
//         AttrId: NCTYPE_ATTRID,
//         SizeofAttr: NCTYPE_UINT32,
//         Attr: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncWriteDnetExplMsg(
//         ObjHandle: NCTYPE_OBJH,
//         ServiceCode: NCTYPE_UINT8,
//         ClassId: NCTYPE_UINT16,
//         InstanceId: NCTYPE_UINT16,
//         ServDataLength: NCTYPE_UINT16,
//         ServData: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
// extern "C" {
//     pub fn ncWriteDnetIO(
//         ObjHandle: NCTYPE_OBJH,
//         SizeofData: NCTYPE_UINT32,
//         Data: NCTYPE_ANY_P,
//     ) -> NCTYPE_STATUS;
// }
