//! define the constant value that have not been successfully generated by `bindgen`

#![allow(non_upper_case_globals, unused_parens, dead_code)]
pub(crate) const NICAN_WARNING_BASE: i32 = 0x3FF62000;
pub(crate) const NICAN_ERROR_BASE: i32 = 0xBFF62000u32 as i32;

pub(crate) const CanErrFunctionTimeout: i32 = (NICAN_ERROR_BASE | 0x001); // was NC_ERR_TIMEOUT
pub(crate) const CanErrWatchdogTimeout: i32 = (NICAN_ERROR_BASE | 0x021); // was NC_ERR_TIMEOUT
pub(crate) const DnetErrConnectionTimeout: i32 = (NICAN_ERROR_BASE | 0x041); // was NC_ERR_TIMEOUT
pub(crate) const DnetWarnConnectionTimeout: i32 = (NICAN_WARNING_BASE | 0x041);
pub(crate) const CanErrScheduleTimeout: i32 = (NICAN_ERROR_BASE | 0x0A1); // was NC_ERR_TIMEOUT
pub(crate) const CanErrDriver: i32 = (NICAN_ERROR_BASE | 0x002); // was NC_ERR_DRIVER
pub(crate) const CanWarnDriver: i32 = (NICAN_WARNING_BASE | 0x002); // was NC_ERR_DRIVER
pub(crate) const CanErrBadNameSyntax: i32 = (NICAN_ERROR_BASE | 0x003); // was NC_ERR_BAD_NAME
pub(crate) const CanErrBadIntfName: i32 = (NICAN_ERROR_BASE | 0x023); // was NC_ERR_BAD_NAME
pub(crate) const CanErrBadCanObjName: i32 = (NICAN_ERROR_BASE | 0x043); // was NC_ERR_BAD_NAME
pub(crate) const CanErrBadParam: i32 = (NICAN_ERROR_BASE | 0x004); // was NC_ERR_BAD_PARAM
pub(crate) const CanErrBadHandle: i32 = (NICAN_ERROR_BASE | 0x024); // was NC_ERR_BAD_PARAM
pub(crate) const CanErrBadAttributeValue: i32 = (NICAN_ERROR_BASE | 0x005); // was NC_ERR_BAD_ATTR_VALUE
pub(crate) const CanErrAlreadyOpen: i32 = (NICAN_ERROR_BASE | 0x006); // was NC_ERR_ALREADY_OPEN
pub(crate) const CanWarnAlreadyOpen: i32 = (NICAN_WARNING_BASE | 0x006); // was NC_ERR_ALREADY_OPEN
pub(crate) const DnetErrOpenIntfMode: i32 = (NICAN_ERROR_BASE | 0x026); // was NC_ERR_ALREADY_OPEN
pub(crate) const DnetErrOpenConnType: i32 = (NICAN_ERROR_BASE | 0x046); // was NC_ERR_ALREADY_OPEN
pub(crate) const CanErrNotStopped: i32 = (NICAN_ERROR_BASE | 0x007); // was NC_ERR_NOT_STOPPED
pub(crate) const CanErrOverflowWrite: i32 = (NICAN_ERROR_BASE | 0x008); // was NC_ERR_OVERFLOW
pub(crate) const CanErrOverflowCard: i32 = (NICAN_ERROR_BASE | 0x028); // was NC_ERR_OVERFLOW
pub(crate) const CanErrOverflowChip: i32 = (NICAN_ERROR_BASE | 0x048); // was NC_ERR_OVERFLOW
pub(crate) const CanErrOverflowRxQueue: i32 = (NICAN_ERROR_BASE | 0x068); // was NC_ERR_OVERFLOW
pub(crate) const CanWarnOldData: i32 = (NICAN_WARNING_BASE | 0x009); // was NC_ERR_OLD_DATA
pub(crate) const CanErrNotSupported: i32 = (NICAN_ERROR_BASE | 0x00A); // was NC_ERR_NOT_SUPPORTED
pub(crate) const CanWarnComm: i32 = (NICAN_WARNING_BASE | 0x00B); // was NC_ERR_CAN_COMM
pub(crate) const CanErrComm: i32 = (NICAN_ERROR_BASE | 0x00B); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnCommStuff: i32 = (NICAN_WARNING_BASE | 0x02B); // was NC_ERR_CAN_COMM
pub(crate) const CanErrCommStuff: i32 = (NICAN_ERROR_BASE | 0x02B); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnCommFormat: i32 = (NICAN_WARNING_BASE | 0x04B); // was NC_ERR_CAN_COMM
pub(crate) const CanErrCommFormat: i32 = (NICAN_ERROR_BASE | 0x04B); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnCommNoAck: i32 = (NICAN_WARNING_BASE | 0x06B); // was NC_ERR_CAN_COMM
pub(crate) const CanErrCommNoAck: i32 = (NICAN_ERROR_BASE | 0x06B); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnCommTx1Rx0: i32 = (NICAN_WARNING_BASE | 0x08B); // was NC_ERR_CAN_COMM
pub(crate) const CanErrCommTx1Rx0: i32 = (NICAN_ERROR_BASE | 0x08B); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnCommTx0Rx1: i32 = (NICAN_WARNING_BASE | 0x0AB); // was NC_ERR_CAN_COMM
pub(crate) const CanErrCommTx0Rx1: i32 = (NICAN_ERROR_BASE | 0x0AB); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnCommBadCRC: i32 = (NICAN_WARNING_BASE | 0x0CB); // was NC_ERR_CAN_COMM
pub(crate) const CanErrCommBadCRC: i32 = (NICAN_ERROR_BASE | 0x0CB); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnCommUnknown: i32 = (NICAN_WARNING_BASE | 0x0EB); // was NC_ERR_CAN_COMM
pub(crate) const CanErrCommUnknown: i32 = (NICAN_ERROR_BASE | 0x0EB); // was NC_ERR_CAN_COMM
pub(crate) const CanWarnTransceiver: i32 = (NICAN_WARNING_BASE | 0x00C); // was NC_ERR_CAN_XCVR
pub(crate) const CanWarnRsrcLimitQueues: i32 = (NICAN_WARNING_BASE | 0x02D); // was NC_ERR_RSRC_LIMITS
pub(crate) const CanErrRsrcLimitQueues: i32 = (NICAN_ERROR_BASE | 0x02D); // was NC_ERR_RSRC_LIMITS
pub(crate) const DnetErrRsrcLimitIO: i32 = (NICAN_ERROR_BASE | 0x04D); // was NC_ERR_RSRC_LIMITS
pub(crate) const DnetErrRsrcLimitWriteSrvc: i32 = (NICAN_ERROR_BASE | 0x06D); // was NC_ERR_RSRC_LIMITS
pub(crate) const DnetErrRsrcLimitReadSrvc: i32 = (NICAN_ERROR_BASE | 0x08D); // was NC_ERR_RSRC_LIMITS: i32 =
pub(crate) const DnetErrRsrcLimitRespPending: i32 = (NICAN_ERROR_BASE | 0x0AD); // was NC_ERR_RSRC_LIMITS
pub(crate) const DnetWarnRsrcLimitRespPending: i32 = (NICAN_WARNING_BASE | 0x0AD);
pub(crate) const CanErrRsrcLimitRtsi: i32 = (NICAN_ERROR_BASE | 0x0CD); // was NC_ERR_RSRC_LIMITS
pub(crate) const DnetErrNoReadAvail: i32 = (NICAN_ERROR_BASE | 0x00E); // was NC_ERR_READ_NOT_AVAIL
pub(crate) const DnetErrBadMacId: i32 = (NICAN_ERROR_BASE | 0x00F); // was NC_ERR_BAD_NET_ID
pub(crate) const DnetErrDevInitOther: i32 = (NICAN_ERROR_BASE | 0x010); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDevInitIoConn: i32 = (NICAN_ERROR_BASE | 0x030); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDevInitInputLen: i32 = (NICAN_ERROR_BASE | 0x050); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDevInitOutputLen: i32 = (NICAN_ERROR_BASE | 0x070); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDevInitEPR: i32 = (NICAN_ERROR_BASE | 0x090); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDevInitVendor: i32 = (NICAN_ERROR_BASE | 0x0B0); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDevInitDevType: i32 = (NICAN_ERROR_BASE | 0x0D0); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDevInitProdCode: i32 = (NICAN_ERROR_BASE | 0x0F0); // was NC_ERR_DEVICE_INIT
pub(crate) const DnetErrDeviceMissing: i32 = (NICAN_ERROR_BASE | 0x011); // was NC_ERR_DEVICE_MISSING
pub(crate) const DnetWarnDeviceMissing: i32 = (NICAN_WARNING_BASE | 0x011); // was NC_ERR_DEVICE_MISSING
pub(crate) const DnetErrFragmentation: i32 = (NICAN_ERROR_BASE | 0x012); // was NC_ERR_FRAGMENTATION
pub(crate) const DnetErrIntfNotOpen: i32 = (NICAN_ERROR_BASE | 0x033); // was NC_ERR_NO_CONFIG
pub(crate) const DnetErrErrorResponse: i32 = (NICAN_ERROR_BASE | 0x014); // was NC_ERR_DNET_ERR_RESP
pub(crate) const CanWarnNotificationPending: i32 = (NICAN_WARNING_BASE | 0x015); // was NC_ERR_NOTIF_PENDING
pub(crate) const CanErrConfigOnly: i32 = (NICAN_ERROR_BASE | 0x017); // was NC_ERR_CONFIG_ONLY
pub(crate) const CanErrPowerOnSelfTest: i32 = (NICAN_ERROR_BASE | 0x018); // PowerOn self test Failure
pub(crate) const ni985xErrBluebonnet: i32 = (NICAN_ERROR_BASE | 0x0AA); // Special error for 985x 1.3 to prevent usage on 907x targets
pub(crate) const LinErrCommBit: i32 = (NICAN_ERROR_BASE | 0x1A0); // Detected incorrect bit value
pub(crate) const LinErrCommFraming: i32 = (NICAN_ERROR_BASE | 0x1A1); // Detected incorrect stop bit of the frame
pub(crate) const LinErrCommResponseTimout: i32 = (NICAN_ERROR_BASE | 0x1A2); // Detected a timeout for a field of the LIN frame.
pub(crate) const LinErrCommWakeup: i32 = (NICAN_ERROR_BASE | 0x1A3); // Detected unexpected behavior when attempting to wake, or be awakened by, the LIN.
pub(crate) const LinErrCommForm: i32 = (NICAN_ERROR_BASE | 0x1A4); // Detected that the form of a LIN frame was incorrect.
pub(crate) const LinErrCommBusNoPowered: i32 = (NICAN_ERROR_BASE | 0x1A5); // Did not detect power on the LIN.

//The percent difference between the passed in baud rate and the actual baud rate was greater than or equal to 0.5%.  LIN 2.0 specifies a clock tolerance of less than 0.5% for a master and less than 1.5% for a slave.
pub(crate) const LinWarnBaudRateOutOfTolerance: i32 = (NICAN_WARNING_BASE | 0x1A6);

// Numbers 0x100 to 0x1FF are used for the NI-CAN Frame API, the NI-DNET API, and LIN.
// Numbers 0x1A0 to 0x1DF are used for the NI-CAN Frame API for LIN .
// Numbers 0x200 to 0x2FF are used for the NI-CAN Channel API.
// Numbers 0x300 to 0x3FF are reserved for future use.
pub(crate) const CanErrMaxObjects: i32 = (NICAN_ERROR_BASE | 0x100);
pub(crate) const CanErrMaxChipSlots: i32 = (NICAN_ERROR_BASE | 0x101);
pub(crate) const CanErrBadDuration: i32 = (NICAN_ERROR_BASE | 0x102);
pub(crate) const CanErrFirmwareNoResponse: i32 = (NICAN_ERROR_BASE | 0x103);
pub(crate) const CanErrBadIdOrOpcode: i32 = (NICAN_ERROR_BASE | 0x104);
pub(crate) const CanWarnBadSizeOrLength: i32 = (NICAN_WARNING_BASE | 0x105);
pub(crate) const CanErrBadSizeOrLength: i32 = (NICAN_ERROR_BASE | 0x105);
pub(crate) const CanErrNotifAlreadyInUse: i32 = (NICAN_ERROR_BASE | 0x107);
pub(crate) const CanErrOneProtocolPerCard: i32 = (NICAN_ERROR_BASE | 0x108);
pub(crate) const CanWarnPeriodsTooFast: i32 = (NICAN_WARNING_BASE | 0x109);
pub(crate) const CanErrDllNotFound: i32 = (NICAN_ERROR_BASE | 0x10A);
pub(crate) const CanErrFunctionNotFound: i32 = (NICAN_ERROR_BASE | 0x10B);
pub(crate) const CanErrLangIntfRsrcUnavail: i32 = (NICAN_ERROR_BASE | 0x10C);
pub(crate) const CanErrRequiresNewHwSeries: i32 = (NICAN_ERROR_BASE | 0x10D);
pub(crate) const CanErrHardwareNotSupported: i32 = CanErrRequiresNewHwSeries;
pub(crate) const CanErrSeriesOneOnly: i32 = (NICAN_ERROR_BASE | 0x10E); //depreciated error code
pub(crate) const CanErrSetAbsTime: i32 = (NICAN_ERROR_BASE | 0x10F);
pub(crate) const CanErrBothApiSameIntf: i32 = (NICAN_ERROR_BASE | 0x110);
pub(crate) const CanErrWaitOverlapsSameObj: i32 = (NICAN_ERROR_BASE | 0x111);
pub(crate) const CanErrNotStarted: i32 = (NICAN_ERROR_BASE | 0x112);
pub(crate) const CanErrConnectTwice: i32 = (NICAN_ERROR_BASE | 0x113);
pub(crate) const CanErrConnectUnsupported: i32 = (NICAN_ERROR_BASE | 0x114);
pub(crate) const CanErrStartTrigBeforeFunc: i32 = (NICAN_ERROR_BASE | 0x115);
pub(crate) const CanErrStringSizeTooLarge: i32 = (NICAN_ERROR_BASE | 0x116);
pub(crate) const CanErrQueueReqdForReadMult: i32 = (NICAN_ERROR_BASE | 0x117);
pub(crate) const CanErrHardwareInitFailed: i32 = (NICAN_ERROR_BASE | 0x118);
pub(crate) const CanErrOldDataLost: i32 = (NICAN_ERROR_BASE | 0x119);
pub(crate) const CanErrOverflowChannel: i32 = (NICAN_ERROR_BASE | 0x11A);
pub(crate) const CanErrUnsupportedModeMix: i32 = (NICAN_ERROR_BASE | 0x11C);
pub(crate) const CanErrNoNetIntfConfig: i32 = (NICAN_ERROR_BASE | 0x11D);
pub(crate) const CanErrBadTransceiverMode: i32 = (NICAN_ERROR_BASE | 0x11E);
pub(crate) const CanErrWrongTransceiverAttr: i32 = (NICAN_ERROR_BASE | 0x11F);
pub(crate) const CanErrRequiresXS: i32 = (NICAN_ERROR_BASE | 0x120);
pub(crate) const CanErrDisconnected: i32 = (NICAN_ERROR_BASE | 0x121);
pub(crate) const CanErrNoTxForListenOnly: i32 = (NICAN_ERROR_BASE | 0x122);
pub(crate) const CanErrSetOnly: i32 = (NICAN_ERROR_BASE | 0x123);
pub(crate) const CanErrBadBaudRate: i32 = (NICAN_ERROR_BASE | 0x124);
pub(crate) const CanErrOverflowFrame: i32 = (NICAN_ERROR_BASE | 0x125);
pub(crate) const CanWarnRTSITooFast: i32 = (NICAN_WARNING_BASE | 0x126);
pub(crate) const CanErrNoTimebase: i32 = (NICAN_ERROR_BASE | 0x127);
pub(crate) const CanErrTimerRunning: i32 = (NICAN_ERROR_BASE | 0x128);
pub(crate) const DnetErrUnsupportedHardware: i32 = (NICAN_ERROR_BASE | 0x129);
pub(crate) const CanErrInvalidLogfile: i32 = (NICAN_ERROR_BASE | 0x12A);
pub(crate) const CanErrMaxPeriodicObjects: i32 = (NICAN_ERROR_BASE | 0x130);
pub(crate) const CanErrUnknownHardwareAttribute: i32 = (NICAN_ERROR_BASE | 0x131);
pub(crate) const CanErrDelayFrameNotSupported: i32 = (NICAN_ERROR_BASE | 0x132);
pub(crate) const CanErrVirtualBusTimingOnly: i32 = (NICAN_ERROR_BASE | 0x133);

pub(crate) const CanErrVirtualNotSupported: i32 = (NICAN_ERROR_BASE | 0x135);
pub(crate) const CanErrWriteMultLimit: i32 = (NICAN_ERROR_BASE | 0x136); // WriteMult does not allow write more that 512 frames at a time
pub(crate) const CanErrObsoletedHardware: i32 = (NICAN_ERROR_BASE | 0x137);
pub(crate) const CanErrVirtualBusTimingMismatch: i32 = (NICAN_ERROR_BASE | 0x138);
pub(crate) const CanErrVirtualBusOnly: i32 = (NICAN_ERROR_BASE | 0x139);
pub(crate) const CanErrConversionTimeRollback: i32 = (NICAN_ERROR_BASE | 0x13A);
pub(crate) const CanErrInterFrameDelayExceeded: i32 = (NICAN_ERROR_BASE | 0x140);
pub(crate) const CanErrLogConflict: i32 = (NICAN_ERROR_BASE | 0x141);
pub(crate) const CanErrBootLoaderUpdated: i32 = (NICAN_ERROR_BASE | 0x142); // Error, bootloader not compatible with firmware.

/* Included for backward compatibility with older versions of NI-CAN */
pub(crate) const CanWarnLowSpeedXcvr: i32 = CanWarnTransceiver; // applies to HS as well as LS
pub(crate) const CanErrOverflowRead: i32 = CanErrOverflowCard; // overflow in card memory now lower level

/* Included for forward compatibility with versions of NI-XNET */
pub(crate) const CanErrorCompatibility: i32 = (NICAN_ERROR_BASE | 0x1B0);
pub(crate) const CanErrorMissingFeature: i32 = (NICAN_ERROR_BASE | 0x1B1);

pub(crate) const nctErrMaxTasks: i32 = (NICAN_ERROR_BASE | 0x200);
pub(crate) const nctErrUndefinedChannel: i32 = (NICAN_ERROR_BASE | 0x201);
pub(crate) const nctErrAmbiguousChannel: i32 = (NICAN_ERROR_BASE | 0x202);
pub(crate) const nctErrConflictingMessage: i32 = (NICAN_ERROR_BASE | 0x203);
pub(crate) const nctErrStringSizeTooSmall: i32 = (NICAN_ERROR_BASE | 0x204);
pub(crate) const nctErrOpenFile: i32 = (NICAN_ERROR_BASE | 0x205);
pub(crate) const nctWarnNoWaveformMode: i32 = (NICAN_WARNING_BASE | 0x206);
pub(crate) const nctErrNullPointer: i32 = (NICAN_ERROR_BASE | 0x207);
pub(crate) const nctErrOnlyOneMsgTimestamped: i32 = (NICAN_ERROR_BASE | 0x208);
pub(crate) const nctErrModeMismatch: i32 = (NICAN_ERROR_BASE | 0x209);
pub(crate) const nctErrReadTimeStampedTimeOut: i32 = (NICAN_ERROR_BASE | 0x20A);
pub(crate) const nctErrAmbiguousIntf: i32 = (NICAN_ERROR_BASE | 0x20B);
pub(crate) const nctErrNoReceiver: i32 = (NICAN_ERROR_BASE | 0x20C);
pub(crate) const nctWarnTaskAlreadyStarted: i32 = (NICAN_WARNING_BASE | 0x20D);
pub(crate) const nctErrStartTriggerTimeout: i32 = (NICAN_ERROR_BASE | 0x20E);
pub(crate) const nctErrUndefinedMessage: i32 = (NICAN_ERROR_BASE | 0x20F);
pub(crate) const nctErrNumberOfBytes: i32 = (NICAN_ERROR_BASE | 0x210);
pub(crate) const nctErrZeroSamples: i32 = (NICAN_ERROR_BASE | 0x211);
pub(crate) const nctErrNoValueNotSpecified: i32 = (NICAN_ERROR_BASE | 0x212);
pub(crate) const nctErrInvalidChannel: i32 = (NICAN_ERROR_BASE | 0x213);
pub(crate) const nctErrOverlappingChannels: i32 = (NICAN_ERROR_BASE | 0x214);
pub(crate) const nctWarnOverlappedChannel: i32 = (NICAN_WARNING_BASE | 0x214);
pub(crate) const nctWarnMessagesRenamed: i32 = (NICAN_WARNING_BASE | 0x215);
pub(crate) const nctWarnChannelsSkipped: i32 = (NICAN_WARNING_BASE | 0x216);
pub(crate) const nctErrTooLargeInteger: i32 = (NICAN_ERROR_BASE | 0x217);

/* The following status codes are inherited from the Frame API.
If you detect a code not listed here, consult the Frame API error listing.  */
pub(crate) const nctErrFunctionTimeout: i32 = CanErrFunctionTimeout;
pub(crate) const nctErrScheduleTimeout: i32 = CanErrScheduleTimeout;
pub(crate) const nctErrDriver: i32 = CanErrDriver;
pub(crate) const nctErrBadIntf: i32 = CanErrBadIntfName;
pub(crate) const nctErrBadParam: i32 = CanErrBadParam;
pub(crate) const nctErrBadHandle: i32 = CanErrBadHandle;
pub(crate) const nctErrBadPropertyValue: i32 = CanErrBadAttributeValue;
pub(crate) const nctErrOverflowWrite: i32 = CanErrOverflowWrite;
pub(crate) const nctErrOverflowChip: i32 = CanErrOverflowChip;
pub(crate) const nctErrOverflowRxQueue: i32 = CanErrOverflowRxQueue;
pub(crate) const nctWarnOldData: i32 = CanWarnOldData;
pub(crate) const nctErrNotSupported: i32 = CanErrNotSupported;
pub(crate) const nctWarnComm: i32 = CanWarnComm;
pub(crate) const nctErrComm: i32 = CanErrComm;
pub(crate) const nctWarnCommStuff: i32 = CanWarnCommStuff;
pub(crate) const nctErrCommStuff: i32 = CanErrCommStuff;
pub(crate) const nctWarnCommFormat: i32 = CanWarnCommFormat;
pub(crate) const nctErrCommFormat: i32 = CanErrCommFormat;
pub(crate) const nctWarnCommNoAck: i32 = CanWarnCommNoAck;
pub(crate) const nctErrCommNoAck: i32 = CanErrCommNoAck;
pub(crate) const nctWarnCommTx1Rx0: i32 = CanWarnCommTx1Rx0;
pub(crate) const nctErrCommTx1Rx0: i32 = CanErrCommTx1Rx0;
pub(crate) const nctWarnCommTx0Rx1: i32 = CanWarnCommTx0Rx1;
pub(crate) const nctErrCommTx0Rx1: i32 = CanErrCommTx0Rx1;
pub(crate) const nctWarnCommBadCRC: i32 = CanWarnCommBadCRC;
pub(crate) const nctErrCommBadCRC: i32 = CanErrCommBadCRC;
pub(crate) const nctWarnTransceiver: i32 = CanWarnTransceiver;
pub(crate) const nctWarnRsrcLimitQueues: i32 = CanWarnRsrcLimitQueues;
pub(crate) const nctErrRsrcLimitQueues: i32 = CanErrRsrcLimitQueues;
pub(crate) const nctErrRsrcLimitRtsi: i32 = CanErrRsrcLimitRtsi;
pub(crate) const nctErrMaxMessages: i32 = CanErrMaxObjects;
pub(crate) const nctErrMaxChipSlots: i32 = CanErrMaxChipSlots;
pub(crate) const nctErrBadSampleRate: i32 = CanErrBadDuration;
pub(crate) const nctErrFirmwareNoResponse: i32 = CanErrFirmwareNoResponse;
pub(crate) const nctErrBadIdOrOpcode: i32 = CanErrBadIdOrOpcode;
pub(crate) const nctWarnBadSizeOrLength: i32 = CanWarnBadSizeOrLength;
pub(crate) const nctErrBadSizeOrLength: i32 = CanErrBadSizeOrLength;
pub(crate) const nctWarnScheduleTooFast: i32 = CanWarnPeriodsTooFast;
pub(crate) const nctErrDllNotFound: i32 = CanErrDllNotFound;
pub(crate) const nctErrFunctionNotFound: i32 = CanErrFunctionNotFound;
pub(crate) const nctErrLangIntfRsrcUnavail: i32 = CanErrLangIntfRsrcUnavail;
pub(crate) const nctErrRequiresNewHwSeries: i32 = CanErrRequiresNewHwSeries;
pub(crate) const nctErrSeriesOneOnly: i32 = CanErrSeriesOneOnly;
pub(crate) const nctErrBothApiSameIntf: i32 = CanErrBothApiSameIntf;
pub(crate) const nctErrTaskNotStarted: i32 = CanErrNotStarted;
pub(crate) const nctErrConnectTwice: i32 = CanErrConnectTwice;
pub(crate) const nctErrConnectUnsupported: i32 = CanErrConnectUnsupported;
pub(crate) const nctErrStartTrigBeforeFunc: i32 = CanErrStartTrigBeforeFunc;
pub(crate) const nctErrStringSizeTooLarge: i32 = CanErrStringSizeTooLarge;
pub(crate) const nctErrHardwareInitFailed: i32 = CanErrHardwareInitFailed;
pub(crate) const nctErrOldDataLost: i32 = CanErrOldDataLost;
pub(crate) const nctErrOverflowChannel: i32 = CanErrOverflowChannel;
pub(crate) const nctErrUnsupportedModeMix: i32 = CanErrUnsupportedModeMix;
pub(crate) const nctErrBadTransceiverMode: i32 = CanErrBadTransceiverMode;
pub(crate) const nctErrWrongTransceiverProp: i32 = CanErrWrongTransceiverAttr;
pub(crate) const nctErrRequiresXS: i32 = CanErrRequiresXS;
pub(crate) const nctErrDisconnected: i32 = CanErrDisconnected;
pub(crate) const nctErrNoTxForListenOnly: i32 = CanErrNoTxForListenOnly;
pub(crate) const nctErrBadBaudRate: i32 = CanErrBadBaudRate;
pub(crate) const nctErrOverflowFrame: i32 = CanErrOverflowFrame;
/* Included for backward compatibility with older versions of NI-CAN */
pub(crate) const nctWarnLowSpeedXcvr: i32 = nctWarnTransceiver; // applies to HS as well as LS
pub(crate) const nctErrOverflowDriver: i32 = nctErrOverflowChannel;
